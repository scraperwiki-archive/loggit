#!/usr/bin/env coffee

spawn = (require 'child_process').spawn

# Return a sequence number and timestamp for a child process.
# *achild.seq* is assumed to be already initialised (to 0, when
# the process is created).
# A list of [seq, string] is returned.
stamp = (achild) ->
    achild.seq += 1
    return [achild.seq, (new Date()).toISOString()]

log = (child, ev) ->
    """Log an event (which is a structured object).  There are
    currently 4 type (start, stdout, stderr, exit).
    Currently it just prints them to console.log.
    """
    # :todo: in future, write to some sort of DB.
    if ev.type == 'start'
        console.log stamp(child) + ' pid: ' + ev.pid +
          ' start: ' + ev.command_line
    if ev.type == 'stdout' or ev.type == 'stderr'
        console.log stamp(child) + ' ' + ev.type + ': ' +
          ev.data
    if ev.type == 'exit'
        console.log stamp(child) + ' exit status: ' + ev.status +
          ' signal: ' + ev.signal

command = process.argv[2]
child_arguments = process.argv[3..]
child = spawn command, child_arguments
child.seq = 0
log child,
    'type': 'start'
    pid: child.pid
    command_line: [command].concat(child_arguments)
          
child.stdout.on 'data', (data) ->
  log child, { type: 'stdout', data: data }
child.stderr.on 'data', (data) ->
  log child, { type: 'stderr', data: data }
child.on 'exit', (code, signal) ->
  log child, { type: 'exit', status: code, signal: signal }
